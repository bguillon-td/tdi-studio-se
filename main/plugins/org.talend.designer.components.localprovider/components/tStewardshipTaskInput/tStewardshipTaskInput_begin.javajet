<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List 
	" 
%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();	
%>
<%
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas != null) && (metadatas.size() > 0)) {
	IMetadataTable metadata = metadatas.get(0);
	
	if (metadata != null) {
	
		List<IMetadataColumn> columnList = metadata.getListColumns();
		int nbSchemaColumns = columnList.size();			
		List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();

		// if output columns are defined
		if (nbSchemaColumns > 0 && outgoingConns != null && outgoingConns.size() > 0){

			String host = ElementParameterParser.getValue(node, "__HOST__");
			String port = ElementParameterParser.getValue(node, "__PORT__");
			String taskType = ElementParameterParser.getValue(node, "__TASKTYPE__");
			String owner = ElementParameterParser.getValue(node,"__OWNER__");
			String tag = ElementParameterParser.getValue(node, "__TAG__");
			String startDate = ElementParameterParser.getValue(node, "__START_DATETIME__");
			String endDate = ElementParameterParser.getValue(node, "__END_DATETIME__");
			String starRanking = ElementParameterParser.getValue(node, "__STAR_RANKING__");
			String limit = ElementParameterParser.getValue(node,"__LIMIT__");
			String status = ElementParameterParser.getValue(node,"__STATUS__");
			String username = ElementParameterParser.getValue(node, "__USERNAME__");
    		String password = ElementParameterParser.getValue(node, "__PASSWORD__");
			boolean targetRecordOnly = ("true").equals(ElementParameterParser.getValue(node,"__TARGET_RECORD_ONLY__"));
			final boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
			
			String version = ElementParameterParser.getValue(node, "__SERVERVERSION__");
			
			IConnection outgoingConn = outgoingConns.get(0);
			if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
				int nb_line_<%=cid%> = 0;	
                java.net.Authenticator.setDefault(new java.net.Authenticator() {
                    protected java.net.PasswordAuthentication getPasswordAuthentication() {
                    
                        <%
                        String passwordFieldName = "__PASSWORD__";
                        %>
                        
                        <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
                                
                    	return new java.net.PasswordAuthentication(<%=username%>, decryptedPassword_<%=cid%>.toCharArray());
                }});
				
				<%if("s60".equals(version)) {%>
					java.net.URL wsdlUrl_<%=cid%> = new java.net.URL("http://"+<%=host%>+":"+<%=port%>+"/talendmdm/services/TDSCWS?wsdl");
				<%} else {%>
					java.net.URL wsdlUrl_<%=cid%> = new java.net.URL("http://"+<%=host%>+":"+<%=port%>+"/org.talend.datastewardship/services/TDSCWS?wsdl");
				<%}%>
				
				<%
				if(isLog4jEnabled){
				%>	
					log.info("<%=cid%> - Attempt to get a task retrieve service from: " + wsdlUrl_<%=cid%> + ".");
				<%
				}
				%>
				org.talend.datastewardship.server.ws.TDSCWS_Service service_<%=cid%> = new org.talend.datastewardship.server.ws.TDSCWS_Service(wsdlUrl_<%=cid%>);
				org.talend.datastewardship.server.ws.TDSCWS TDSCWS_<%=cid%> = service_<%=cid%>.getTDSCWSImplPort();
				<%
				if(isLog4jEnabled){
				%>	
					log.info("<%=cid%> - Got successfully.");
				<%
				}
				%>
				
				String startDateString_<%=cid%> = <%=startDate.equals("")?null:startDate%>;
				String endDateString_<%=cid%> = <%=endDate.equals("")?null:endDate%>;
				javax.xml.datatype.DatatypeFactory factory_<%=cid%> = javax.xml.datatype.DatatypeFactory.newInstance();
            	javax.xml.datatype.XMLGregorianCalendar startXMLGregorianCalendar_<%=cid%> = null;
            	javax.xml.datatype.XMLGregorianCalendar endXMLGregorianCalendar_<%=cid%> = null;
            	if(startDateString_<%=cid%>!=null && !startDateString_<%=cid%>.equals("")){
            		java.text.SimpleDateFormat startdf_<%=cid%> = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					startdf_<%=cid%>.parse(startDateString_<%=cid%>);
					java.util.Calendar startCal_<%=cid%> = startdf_<%=cid%>.getCalendar();
					java.util.GregorianCalendar startDate_<%=cid%> = (java.util.GregorianCalendar) startCal_<%=cid%>;
					startXMLGregorianCalendar_<%=cid%> = factory_<%=cid%>.newXMLGregorianCalendar(startDate_<%=cid%>);
				}
            	if(endDateString_<%=cid%>!=null && !endDateString_<%=cid%>.equals("")){
                	java.text.SimpleDateFormat enddf_<%=cid%> = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    enddf_<%=cid%>.parse(endDateString_<%=cid%>);
                    java.util.Calendar endCal_<%=cid%> = enddf_<%=cid%>.getCalendar();
                    java.util.GregorianCalendar endDate_<%=cid%> = (java.util.GregorianCalendar) endCal_<%=cid%>;
					endXMLGregorianCalendar_<%=cid%> = factory_<%=cid%>.newXMLGregorianCalendar(endDate_<%=cid%>);
				}
				<%
				if(isLog4jEnabled){
				%>
					log.info("<%=cid%> - Start to retrieve tasks from server.");
				<%
				}
				%>
				java.util.List<net.java.dev.jaxb.array.StringArray> tasksResult_<%=cid%> = TDSCWS_<%=cid%>.searchTasks(<%=taskType%>,<%=owner.equals("")?null:owner%>,<%=tag.equals("")?null:tag%>,startXMLGregorianCalendar_<%=cid%>,endXMLGregorianCalendar_<%=cid%>,<%=starRanking%>,<%=limit%>,<%=status.equals("null")?null:"\""+status+"\""%>);
				for(net.java.dev.jaxb.array.StringArray taskResult_<%=cid%>:tasksResult_<%=cid%>){
					java.util.List<String> taskCols_<%=cid%> = taskResult_<%=cid%>.getItem();
					
					java.util.List<java.util.Map<String,String>> records_<%=cid%> = new java.util.ArrayList<java.util.Map<String,String>>();
					java.util.Map<String,String> recordTmp_<%=cid%>  = null;
					java.util.List<net.java.dev.jaxb.array.StringArray> tgtRecord_<%=cid%> = TDSCWS_<%=cid%>.getTgtRecord(taskCols_<%=cid%>.get(0));
					recordTmp_<%=cid%> = new java.util.HashMap<String,String>();
					if(tgtRecord_<%=cid%> != null){
						recordTmp_<%=cid%>.put("TARGET","true");
						for(net.java.dev.jaxb.array.StringArray tgtCols_<%=cid%>:tgtRecord_<%=cid%>){
							java.util.List<String> tgtCol_<%=cid%> = tgtCols_<%=cid%>.getItem();
							if(tgtCol_<%=cid%>!=null && !tgtCol_<%=cid%>.isEmpty()){
								 recordTmp_<%=cid%>.put(tgtCol_<%=cid%>.get(0),tgtCol_<%=cid%>.get(3));
							}
						}
					}
					records_<%=cid%>.add(recordTmp_<%=cid%>);// out of if statement is for return task info.
					
					<%if(!targetRecordOnly){%>
						java.util.List<net.java.dev.jaxb.array.StringArrayArray> srcRecords_<%=cid%> = TDSCWS_<%=cid%>.getSrcRecord(taskCols_<%=cid%>.get(0));
			            for (net.java.dev.jaxb.array.StringArrayArray srcRecord_<%=cid%> : srcRecords_<%=cid%>) {
			                java.util.List<net.java.dev.jaxb.array.StringArray> srcRecordItem_<%=cid%> = srcRecord_<%=cid%>.getItem();
			                recordTmp_<%=cid%> = new java.util.HashMap<String,String>();
							recordTmp_<%=cid%>.put("TARGET","false");
							String srcRecordName_<%=cid%> = "";
			                for (net.java.dev.jaxb.array.StringArray srcCols_<%=cid%> : srcRecordItem_<%=cid%>) {
			                    java.util.List<String> srcCol_<%=cid%> = srcCols_<%=cid%>.getItem();
			                    if(srcCol_<%=cid%>!=null && !srcCol_<%=cid%>.isEmpty()){
									 recordTmp_<%=cid%>.put(srcCol_<%=cid%>.get(0),srcCol_<%=cid%>.get(3));
									 srcRecordName_<%=cid%> = srcCol_<%=cid%>.get(4);
								}
			                }
			                recordTmp_<%=cid%>.put("SOURCE",srcRecordName_<%=cid%>);
			                records_<%=cid%>.add(recordTmp_<%=cid%>);
			            }
		            <%}%>
		            for(java.util.Map<String,String> record_<%=cid%> : records_<%=cid%>){
		            	<%
		            	if(isLog4jEnabled){
						%>
							log.debug("<%=cid%> - Retrieving the task " + (nb_line_<%=cid%>+1) + ".");
						<%
						}
		            	%>
		            	<%=outgoingConn.getName()%>.TASK_ID = taskCols_<%=cid%>.get(0);
						<%=outgoingConn.getName()%>.TASK_TYPE = taskCols_<%=cid%>.get(1);
						<%=outgoingConn.getName()%>.TASK_CREATEDBY = taskCols_<%=cid%>.get(2);
						<%=outgoingConn.getName()%>.TASK_CREATEDON = ParserUtils.parseTo_Date(taskCols_<%=cid%>.get(3),"yyyy-MM-dd HH:mm:ss");
						<%=outgoingConn.getName()%>.TASK_OWNER = taskCols_<%=cid%>.get(4);
						<%=outgoingConn.getName()%>.TASK_STATUS = taskCols_<%=cid%>.get(5);
						<%=outgoingConn.getName()%>.TASK_STARS = Integer.valueOf(taskCols_<%=cid%>.get(6));
						<%if(!targetRecordOnly){%>
							<%=outgoingConn.getName()%>.TARGET = Boolean.valueOf(record_<%=cid%>.get("TARGET"));
							<%=outgoingConn.getName()%>.SOURCE = record_<%=cid%>.get("SOURCE");
						<%}%>
						nb_line_<%=cid%> ++;
						<%
						for( int i = 0; i < columnList.size(); i++) {
							IMetadataColumn column = columnList.get(i);
							String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
							JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
							String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
							
							if(!"TASK_ID".equals(column.getLabel()) 
								&& !"TASK_TYPE".equals(column.getLabel()) 
								&& !"TASK_CREATEDBY".equals(column.getLabel()) 
								&& !"TASK_CREATEDON".equals(column.getLabel()) 
								&& !"TASK_OWNER".equals(column.getLabel()) 
								&& !"TASK_STATUS".equals(column.getLabel()) 
								&& !"TASK_STARS".equals(column.getLabel())
								&& !"TARGET".equals(column.getLabel())
								&& !"SOURCE".equals(column.getLabel())){
								%>
								if(record_<%=cid%>.get("<%=column.getLabel()%>")!=null){
									<%
									if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) { // String or Object
									%>
										<%=outgoingConn.getName()%>.<%=column.getLabel()%> = record_<%=cid%>.get("<%=column.getLabel()%>");
									<%
									} else if(javaType == JavaTypesManager.DATE) { // Date
									%>
										<%=outgoingConn.getName()%>.<%=column.getLabel()%> = ParserUtils.parseTo_Date(record_<%=cid%>.get("<%=column.getLabel()%>"), <%= patternValue %>);
									<%						
									}else{
									%>
										<%=outgoingConn.getName()%>.<%=column.getLabel()%> = ParserUtils.parseTo_<%= typeToGenerate %>(record_<%=cid%>.get("<%=column.getLabel()%>"));
									<%
									}
									%>
								}else{
				    				<%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
				    			}
							<%
							}
						}
						%>
			<%
			}
		}
	}
}
%>