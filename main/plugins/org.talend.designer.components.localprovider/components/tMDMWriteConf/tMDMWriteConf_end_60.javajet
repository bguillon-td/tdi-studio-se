<%@ jet 
imports="
    	org.talend.core.model.process.INode    
    	org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection    
		org.talend.core.model.process.IConnectionCategory
    	org.talend.core.model.process.EConnectionType
		org.talend.core.model.utils.NodeUtil  		
		" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String virtualcid = cid;
	String destination = ElementParameterParser.getValue(node, "__DESTINATION__");
	if(destination!=null && !"".equals(destination)){
		cid = destination;
	}
	
	boolean isStaging = "STAGING".equalsIgnoreCase(ElementParameterParser.getValue(node, "__CONTAINER_TYPE__"));
	
	boolean useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
	
	boolean isMassInsert =("true").equals(ElementParameterParser.getValue(node,"__EXTENDINSERT__"));
	boolean withReport = ("true").equals(ElementParameterParser.getValue(node,"__WITHREPORT__"));
	
	boolean addTaskID = ("true").equals(ElementParameterParser.getValue(node,"__ADD_TASKID__"));
	String taskID = ElementParameterParser.getValue(node,"__TASKID__");
	boolean usePartialUpdate = ("true").equals(ElementParameterParser.getValue(node,"__USE_PARTIAL_UPDATE__"));
%>
	}
}
<%
INode sourceNode = node.getIncomingConnections(EConnectionType.ON_COMPONENT_OK).get(0).getSource();
String virtualSourceCid = sourceNode.getUniqueName();
INode startNode = NodeUtil.getSpecificStartNode(sourceNode);
String startNodeCid = null; 
if(startNode != null){
	startNodeCid = startNode.getUniqueName();
} 
IConnection nextMergeConn = NodeUtil.getNextMergeConnection(node);
if(nextMergeConn != null && nextMergeConn.getInputId()>1 && startNodeCid != null){
%>
	txf_<%=cid%>.join();
	if(txf_<%=cid%>.getLastException()!=null) {
		currentComponent = txf_<%=cid%>.getCurrentComponent();
		throw txf_<%=cid%>.getLastException();
	}
	globalMap.remove("queue_<%=virtualSourceCid%>");
<%
}else{
%>
	String readFinishWithExceptionMarkWithPipeId_<%=cid%> = "<%=cid%>_FINISH_WITH_EXCEPTION"+(queue_<%=cid%>==null?"":queue_<%=cid%>.hashCode());
	if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_<%=cid%>)){
		globalMap.put(readFinishWithExceptionMarkWithPipeId_<%=cid%>, null);// syn
		globalMap.remove(readFinishWithExceptionMarkWithPipeId_<%=cid%>);
		return;
	} 
	globalMap.remove("queue_<%=node.getUniqueName()%>");
<%
}
%>
globalMap.put(readFinishMarkWithPipeId_<%=cid%>,null);//syn
globalMap.remove(readFinishMarkWithPipeId_<%=cid%>);
<%
if(!usePartialUpdate){
	if(isMassInsert){
		if(!isStaging && withReport){
%> 
	if(miList_<%=cid %>.size() > 0){
		wspks_<%=cid %> = tmdmWS_<%=cid %>.putItemWithReportArray(miList_<%=cid %>.toArray(new org.talend.mdm.webservice.WSPutItemWithReport[miList_<%=cid %>.size()]));
		miList_<%=cid %>.clear();
		miList_<%=cid %> = null;
		<%if(addTaskID){%>
        	tmdmWS_<%=cid %>.updateItemArrayMetadata(util_<%=cid%>. makeUpdateMeteItms(taskIDs_<%=cid%>,wspks_<%=cid %>));
        	taskIDs_<%=cid%>.clear();
        <%}%>
	}
<%
		}else{%>
	if(miList_<%=cid %>.size() > 0){
		wspks_<%=cid %> = tmdmWS_<%=cid %>.putItemArray(miList_<%=cid %>.toArray(new org.talend.mdm.webservice.WSPutItem[miList_<%=cid %>.size()]));
		miList_<%=cid %>.clear();
		miList_<%=cid %> = null;
		<%if(addTaskID){%>
        	tmdmWS_<%=cid %>.updateItemArrayMetadata(util_<%=cid%>. makeUpdateMeteItms(taskIDs_<%=cid%>,wspks_<%=cid %>));
        	taskIDs_<%=cid%>.clear();
        <%}%>
	}
<%
		}
	}
}%>
 	<%if(!useExistingConn){%>
 		stub_<%=cid %>.logout(new org.talend.mdm.webservice.WSLogout());
 	<%}%>
 	
 	globalMap.put("<%=cid %>_NB_LINE",nb_line_<%=cid %>);  
 	globalMap.put("<%=cid %>_NB_LINE_REJECTED",nb_line_rejected_<%=cid%>);           
            