<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser
    	org.talend.designer.codegen.config.CodeGeneratorArgument
       	org.talend.core.model.process.IConnection    
		org.talend.core.model.process.IConnectionCategory
    	org.talend.core.model.process.EConnectionType
		org.talend.core.model.utils.NodeUtil    	
		"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String virtualcid = cid;
	String destination = ElementParameterParser.getValue(node, "__DESTINATION__");
	if(destination!=null && !"".equals(destination)){
		cid = destination;
	}

	boolean useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	String conn = "TMDMService_" + connection;
	String mdmUrl = ElementParameterParser.getValue(node, "__MDMURL__");
	String username = ElementParameterParser.getValue(node, "__USERNAME__");

	String universe = ElementParameterParser.getValue(node, "__UNIVERSE__");
	String dataModule = ElementParameterParser.getValue(node, "__DATAMODEL__");
	String dataCluster = ElementParameterParser.getValue(node, "__DATACLUSTER__");
	boolean isStaging = "STAGING".equalsIgnoreCase(ElementParameterParser.getValue(node, "__CONTAINER_TYPE__"));
	
	boolean withReport = ("true").equals(ElementParameterParser.getValue(node,"__WITHREPORT__"));
	boolean isMassInsert =("true").equals(ElementParameterParser.getValue(node,"__EXTENDINSERT__"));
	
	boolean addTaskID = ("true").equals(ElementParameterParser.getValue(node,"__ADD_TASKID__"));
	boolean usePartialUpdate = ("true").equals(ElementParameterParser.getValue(node,"__USE_PARTIAL_UPDATE__"));
	
	boolean storeFlow = ("true").equals(ElementParameterParser.getValue(node, "__STORE_FLOW__"));
%>       
int nb_line_<%=cid %> = 0;
int nb_line_rejected_<%=cid%> = 0;
<%if(!usePartialUpdate){%>
	<%if(addTaskID){%>
		class Util_<%=cid%>{
			public org.talend.mdm.webservice.WSUpdateMetadataItem makeUpdateMeteItm(String taskID,org.talend.mdm.webservice.WSItemPK wspk){
				org.talend.mdm.webservice.WSUpdateMetadataItem wsUpdateMetadataItem = new org.talend.mdm.webservice.WSUpdateMetadataItem();
		        wsUpdateMetadataItem.setTaskId(taskID);
		        wsUpdateMetadataItem.setWsItemPK(wspk);
		        return wsUpdateMetadataItem;
			}
			public org.talend.mdm.webservice.WSUpdateMetadataItem[] makeUpdateMeteItms(java.util.List<String> taskIDs,org.talend.mdm.webservice.WSItemPK[] wspks){
				java.util.List<org.talend.mdm.webservice.WSUpdateMetadataItem> wsUpdateMetadataItems = new java.util.ArrayList<org.talend.mdm.webservice.WSUpdateMetadataItem>();
				int i = 0;
		        for(org.talend.mdm.webservice.WSItemPK wspk : wspks){
		        	wsUpdateMetadataItems.add(makeUpdateMeteItm(taskIDs.get(i),wspk));
		        	i++;
		        }
		        return wsUpdateMetadataItems.toArray(new org.talend.mdm.webservice.WSUpdateMetadataItem[wsUpdateMetadataItems.size()]);
			}
		}
		Util_<%=cid%> util_<%=cid%> = new Util_<%=cid%>();
	<%}%>
	<%if(isMassInsert){
		if(!isStaging && withReport){%>
			java.util.List <org.talend.mdm.webservice.WSPutItemWithReport> miList_<%=cid %> = new java.util.ArrayList<org.talend.mdm.webservice.WSPutItemWithReport>();
	<%	}else{%>
			java.util.List <org.talend.mdm.webservice.WSPutItem> miList_<%=cid %> = new java.util.ArrayList<org.talend.mdm.webservice.WSPutItem>();
	<%
		}
		if(addTaskID){
	%>
			java.util.List<String> taskIDs_<%=cid%> = new java.util.ArrayList<String>();
	<%	
		}
	}
}%>

<%if(!useExistingConn){%>
	org.talend.mdm.webservice.TMDMService_ServiceLocator tmdmService_<%=cid %> = new org.talend.mdm.webservice.TMDMService_ServiceLocator();
	tmdmService_<%=cid %>.setTMDMPortEndpointAddress(<%=mdmUrl %>);
	org.talend.mdm.webservice.TMDMService_PortType tmdmWS_<%=cid %> = tmdmService_<%=cid %>.getTMDMPort();    
	org.talend.mdm.webservice.TMDMServiceSoapBindingStub stub_<%=cid %> = (org.talend.mdm.webservice.TMDMServiceSoapBindingStub)tmdmWS_<%=cid %>;
	
	// Authentification
	<%if(universe==null || ("").equals(universe.trim()) || ("\"\"").equals(universe.trim())){%>
	stub_<%=cid %>.setUsername(<%=username %>);
	<%}else{%>
	stub_<%=cid %>.setUsername(<%=universe%> + "/" + <%=username %>);
	<%}%>
	
    <%
    String passwordFieldName = "__PASSWORD__";
    %>
    
    <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
	
	stub_<%=cid %>.setPassword(decryptedPassword_<%=cid%>);
<%}else{%>
	org.talend.mdm.webservice.TMDMService_PortType tmdmWS_<%=cid %> = (org.talend.mdm.webservice.TMDMService_PortType)globalMap.get("<%=conn%>");
<%}%>

org.talend.mdm.webservice.WSDataClusterPK dataCluster_<%=cid %> = new org.talend.mdm.webservice.WSDataClusterPK(<%=dataCluster %> + "<%=isStaging?"#STAGING":""%>");
org.talend.mdm.webservice.WSDataModelPK dataModel_<%=cid %> = new org.talend.mdm.webservice.WSDataModelPK(<%=dataModule %>);

String input_<%=cid %>;

org.talend.mdm.webservice.WSItemPK[] wspks_<%=cid %>;
org.talend.mdm.webservice.WSItemPK wspk_<%=cid %>;

<%
INode sourceNode = node.getIncomingConnections(EConnectionType.ON_COMPONENT_OK).get(0).getSource();
String virtualSourceCid = sourceNode.getUniqueName();
INode startNode = NodeUtil.getSpecificStartNode(sourceNode);
String startNodeCid = null; 
if(startNode != null){
	startNodeCid = startNode.getUniqueName();
} 
IConnection nextMergeConn = NodeUtil.getNextMergeConnection(node);
if(nextMergeConn != null && nextMergeConn.getInputId()>1 && startNodeCid != null){	
%>
	java.util.Queue<String> queue_<%=cid%> = new java.util.concurrent.ConcurrentLinkedQueue<String>();
	<%
	if(storeFlow){
	%>
		java.util.List<java.util.Map<String,String>> xmlFlowList_<%=cid%> = java.util.Collections.synchronizedList(new java.util.ArrayList<java.util.Map<String,String>>());
		int flowNum_<%=cid%> = 0;
	<%
	}
	%>
	class ThreadXMLField_<%=cid%> extends Thread {
		java.util.Queue<String> queue;
		java.util.List<java.util.Map<String,String>> flows;
		java.lang.Exception lastException;
		String currentComponent;
		
		ThreadXMLField_<%=cid%>(java.util.Queue q) {
			this.queue = q;
			globalMap.put("queue_<%=virtualSourceCid%>", queue);
			lastException = null;
		}
		
		ThreadXMLField_<%=cid%>(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
			this.queue = q;
			this.flows = l;
			lastException = null;
			globalMap.put("queue_<%=virtualSourceCid%>", queue);
			globalMap.put("flows_<%=virtualSourceCid%>", flows);
		}
		
		public java.lang.Exception getLastException() {
			return this.lastException;
		}
		public String getCurrentComponent() {
			return this.currentComponent;
		}
	
		@Override
		public void run() {
			try {
				<%=startNodeCid%>Process(globalMap);
			} catch (TalendException te) {
				this.lastException = te.getException();
				this.currentComponent = te.getCurrentComponent();
				globalMap.put("<%=virtualcid%>_FINISH" + (this.queue==null?"":this.queue.hashCode()), "true");
			}
		}
	}
	<%if(storeFlow){%>
		ThreadXMLField_<%=cid%> txf_<%=cid%> = new ThreadXMLField_<%=cid%>(queue_<%=cid%>, xmlFlowList_<%=cid%>);
	<%}else{%>
		ThreadXMLField_<%=cid%> txf_<%=cid%> = new ThreadXMLField_<%=cid%>(queue_<%=cid%>);
	<%}%>
	txf_<%=cid%>.start();
<%
}else{
	if(storeFlow){
	%>
		java.util.List<java.util.Map<String,String>> xmlFlowList_<%=cid%> = (java.util.List<java.util.Map<String,String>>)globalMap.get("flows_<%=virtualcid%>");
		int flowNum_<%=cid%> = 0;
	<%
	}
	%>
	java.util.Queue<String> queue_<%=cid%> = (java.util.Queue<String>) globalMap.get("queue_<%=virtualcid%>"); 
<%
}
%>
	String readFinishMarkWithPipeId_<%=cid%> = "<%=virtualcid%>_FINISH"+(queue_<%=cid%>==null?"":queue_<%=cid%>.hashCode());
	while(!globalMap.containsKey(readFinishMarkWithPipeId_<%=cid%>) || !queue_<%=cid%>.isEmpty()) { 
		if (!queue_<%=cid%>.isEmpty()) {
